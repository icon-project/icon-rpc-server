# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import loopchain_pb2 as loopchain__pb2


class InnerServiceStub(object):
  """########################################################################
  Peer Services
  ########################################################################

  Peer Inner Service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Request = channel.unary_unary(
        '/InnerService/Request',
        request_serializer=loopchain__pb2.Message.SerializeToString,
        response_deserializer=loopchain__pb2.Message.FromString,
        )
    self.GetStatus = channel.unary_unary(
        '/InnerService/GetStatus',
        request_serializer=loopchain__pb2.StatusRequest.SerializeToString,
        response_deserializer=loopchain__pb2.StatusReply.FromString,
        )
    self.GetScoreStatus = channel.unary_unary(
        '/InnerService/GetScoreStatus',
        request_serializer=loopchain__pb2.StatusRequest.SerializeToString,
        response_deserializer=loopchain__pb2.StatusReply.FromString,
        )
    self.Stop = channel.unary_unary(
        '/InnerService/Stop',
        request_serializer=loopchain__pb2.StopRequest.SerializeToString,
        response_deserializer=loopchain__pb2.StopReply.FromString,
        )
    self.Echo = channel.unary_unary(
        '/InnerService/Echo',
        request_serializer=loopchain__pb2.CommonRequest.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.GetBlock = channel.unary_unary(
        '/InnerService/GetBlock',
        request_serializer=loopchain__pb2.GetBlockRequest.SerializeToString,
        response_deserializer=loopchain__pb2.GetBlockReply.FromString,
        )
    self.Query = channel.unary_unary(
        '/InnerService/Query',
        request_serializer=loopchain__pb2.QueryRequest.SerializeToString,
        response_deserializer=loopchain__pb2.QueryReply.FromString,
        )
    self.Subscribe = channel.unary_unary(
        '/InnerService/Subscribe',
        request_serializer=loopchain__pb2.PeerRequest.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.UnSubscribe = channel.unary_unary(
        '/InnerService/UnSubscribe',
        request_serializer=loopchain__pb2.PeerRequest.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.NotifyLeaderBroken = channel.unary_unary(
        '/InnerService/NotifyLeaderBroken',
        request_serializer=loopchain__pb2.CommonRequest.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.NotifyProcessError = channel.unary_unary(
        '/InnerService/NotifyProcessError',
        request_serializer=loopchain__pb2.CommonRequest.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )


class InnerServiceServicer(object):
  """########################################################################
  Peer Services
  ########################################################################

  Peer Inner Service
  """

  def Request(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetScoreStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Stop(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Echo(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetBlock(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Query(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UnSubscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NotifyLeaderBroken(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NotifyProcessError(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InnerServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Request': grpc.unary_unary_rpc_method_handler(
          servicer.Request,
          request_deserializer=loopchain__pb2.Message.FromString,
          response_serializer=loopchain__pb2.Message.SerializeToString,
      ),
      'GetStatus': grpc.unary_unary_rpc_method_handler(
          servicer.GetStatus,
          request_deserializer=loopchain__pb2.StatusRequest.FromString,
          response_serializer=loopchain__pb2.StatusReply.SerializeToString,
      ),
      'GetScoreStatus': grpc.unary_unary_rpc_method_handler(
          servicer.GetScoreStatus,
          request_deserializer=loopchain__pb2.StatusRequest.FromString,
          response_serializer=loopchain__pb2.StatusReply.SerializeToString,
      ),
      'Stop': grpc.unary_unary_rpc_method_handler(
          servicer.Stop,
          request_deserializer=loopchain__pb2.StopRequest.FromString,
          response_serializer=loopchain__pb2.StopReply.SerializeToString,
      ),
      'Echo': grpc.unary_unary_rpc_method_handler(
          servicer.Echo,
          request_deserializer=loopchain__pb2.CommonRequest.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'GetBlock': grpc.unary_unary_rpc_method_handler(
          servicer.GetBlock,
          request_deserializer=loopchain__pb2.GetBlockRequest.FromString,
          response_serializer=loopchain__pb2.GetBlockReply.SerializeToString,
      ),
      'Query': grpc.unary_unary_rpc_method_handler(
          servicer.Query,
          request_deserializer=loopchain__pb2.QueryRequest.FromString,
          response_serializer=loopchain__pb2.QueryReply.SerializeToString,
      ),
      'Subscribe': grpc.unary_unary_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=loopchain__pb2.PeerRequest.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'UnSubscribe': grpc.unary_unary_rpc_method_handler(
          servicer.UnSubscribe,
          request_deserializer=loopchain__pb2.PeerRequest.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'NotifyLeaderBroken': grpc.unary_unary_rpc_method_handler(
          servicer.NotifyLeaderBroken,
          request_deserializer=loopchain__pb2.CommonRequest.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'NotifyProcessError': grpc.unary_unary_rpc_method_handler(
          servicer.NotifyProcessError,
          request_deserializer=loopchain__pb2.CommonRequest.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'InnerService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class PeerServiceStub(object):
  """Peer Outer Service for Outer Client or other Peer
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Request = channel.unary_unary(
        '/PeerService/Request',
        request_serializer=loopchain__pb2.Message.SerializeToString,
        response_deserializer=loopchain__pb2.Message.FromString,
        )
    self.GetStatus = channel.unary_unary(
        '/PeerService/GetStatus',
        request_serializer=loopchain__pb2.StatusRequest.SerializeToString,
        response_deserializer=loopchain__pb2.StatusReply.FromString,
        )
    self.GetScoreStatus = channel.unary_unary(
        '/PeerService/GetScoreStatus',
        request_serializer=loopchain__pb2.StatusRequest.SerializeToString,
        response_deserializer=loopchain__pb2.StatusReply.FromString,
        )
    self.Stop = channel.unary_unary(
        '/PeerService/Stop',
        request_serializer=loopchain__pb2.StopRequest.SerializeToString,
        response_deserializer=loopchain__pb2.StopReply.FromString,
        )
    self.CreateTx = channel.unary_unary(
        '/PeerService/CreateTx',
        request_serializer=loopchain__pb2.CreateTxRequest.SerializeToString,
        response_deserializer=loopchain__pb2.CreateTxReply.FromString,
        )
    self.GetTx = channel.unary_unary(
        '/PeerService/GetTx',
        request_serializer=loopchain__pb2.GetTxRequest.SerializeToString,
        response_deserializer=loopchain__pb2.GetTxReply.FromString,
        )
    self.GetBlock = channel.unary_unary(
        '/PeerService/GetBlock',
        request_serializer=loopchain__pb2.GetBlockRequest.SerializeToString,
        response_deserializer=loopchain__pb2.GetBlockReply.FromString,
        )
    self.GetPrecommitBlock = channel.unary_unary(
        '/PeerService/GetPrecommitBlock',
        request_serializer=loopchain__pb2.PrecommitBlockRequest.SerializeToString,
        response_deserializer=loopchain__pb2.PrecommitBlockReply.FromString,
        )
    self.Query = channel.unary_unary(
        '/PeerService/Query',
        request_serializer=loopchain__pb2.QueryRequest.SerializeToString,
        response_deserializer=loopchain__pb2.QueryReply.FromString,
        )
    self.GetInvokeResult = channel.unary_unary(
        '/PeerService/GetInvokeResult',
        request_serializer=loopchain__pb2.GetInvokeResultRequest.SerializeToString,
        response_deserializer=loopchain__pb2.GetInvokeResultReply.FromString,
        )
    self.BlockSync = channel.unary_unary(
        '/PeerService/BlockSync',
        request_serializer=loopchain__pb2.BlockSyncRequest.SerializeToString,
        response_deserializer=loopchain__pb2.BlockSyncReply.FromString,
        )
    self.AnnounceUnconfirmedBlock = channel.unary_unary(
        '/PeerService/AnnounceUnconfirmedBlock',
        request_serializer=loopchain__pb2.BlockSend.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.AnnounceNewBlockForVote = channel.unary_unary(
        '/PeerService/AnnounceNewBlockForVote',
        request_serializer=loopchain__pb2.NewBlockSend.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.AnnounceConfirmedBlock = channel.unary_unary(
        '/PeerService/AnnounceConfirmedBlock',
        request_serializer=loopchain__pb2.BlockAnnounce.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.AnnounceNewPeer = channel.unary_unary(
        '/PeerService/AnnounceNewPeer',
        request_serializer=loopchain__pb2.PeerRequest.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.Echo = channel.unary_unary(
        '/PeerService/Echo',
        request_serializer=loopchain__pb2.CommonRequest.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.ComplainLeader = channel.unary_unary(
        '/PeerService/ComplainLeader',
        request_serializer=loopchain__pb2.ComplainLeaderRequest.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.GetChannelInfos = channel.unary_unary(
        '/PeerService/GetChannelInfos',
        request_serializer=loopchain__pb2.GetChannelInfosRequest.SerializeToString,
        response_deserializer=loopchain__pb2.GetChannelInfosReply.FromString,
        )
    self.GetLastBlockHash = channel.unary_unary(
        '/PeerService/GetLastBlockHash',
        request_serializer=loopchain__pb2.CommonRequest.SerializeToString,
        response_deserializer=loopchain__pb2.BlockReply.FromString,
        )
    self.Subscribe = channel.unary_unary(
        '/PeerService/Subscribe',
        request_serializer=loopchain__pb2.PeerRequest.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.UnSubscribe = channel.unary_unary(
        '/PeerService/UnSubscribe',
        request_serializer=loopchain__pb2.PeerRequest.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.AddTx = channel.unary_unary(
        '/PeerService/AddTx',
        request_serializer=loopchain__pb2.TxSend.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.AddTxList = channel.unary_unary(
        '/PeerService/AddTxList',
        request_serializer=loopchain__pb2.TxSendList.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.VoteUnconfirmedBlock = channel.unary_unary(
        '/PeerService/VoteUnconfirmedBlock',
        request_serializer=loopchain__pb2.BlockVote.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.BroadcastVote = channel.unary_unary(
        '/PeerService/BroadcastVote',
        request_serializer=loopchain__pb2.Vote.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )


class PeerServiceServicer(object):
  """Peer Outer Service for Outer Client or other Peer
  """

  def Request(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetScoreStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Stop(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateTx(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTx(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetBlock(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetPrecommitBlock(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Query(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetInvokeResult(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BlockSync(self, request, context):
    """Peer 의 Block Height 보정용 interface
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AnnounceUnconfirmedBlock(self, request, context):
    """Subscribe 후 broadcast 받는 인터페이스는 Announce- 로 시작한다.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AnnounceNewBlockForVote(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AnnounceConfirmedBlock(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AnnounceNewPeer(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Echo(self, request, context):
    """Test 검증을 위한 인터페이스
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ComplainLeader(self, request, context):
    """Leader 선정을 위한 인터페이스
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetChannelInfos(self, request, context):
    """RadioStation(High layer node) function
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLastBlockHash(self, request, context):
    """/////////////////////////////////////////////////////////////////////
    BlockGenerator (leader) 에게만 허용되어야 하는 interface
    /////////////////////////////////////////////////////////////////////
    RadioStation 에서 GetLastBlockHash 는 Block Height Sync 를 위해서 사용된다.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Subscribe(self, request, context):
    """Subscribe 와 UnSubscribe 는 Broadcast 관련 메소드로 radiostation.proto 와 동일하게 구성되어야 한다.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UnSubscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddTx(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddTxList(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VoteUnconfirmedBlock(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BroadcastVote(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PeerServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Request': grpc.unary_unary_rpc_method_handler(
          servicer.Request,
          request_deserializer=loopchain__pb2.Message.FromString,
          response_serializer=loopchain__pb2.Message.SerializeToString,
      ),
      'GetStatus': grpc.unary_unary_rpc_method_handler(
          servicer.GetStatus,
          request_deserializer=loopchain__pb2.StatusRequest.FromString,
          response_serializer=loopchain__pb2.StatusReply.SerializeToString,
      ),
      'GetScoreStatus': grpc.unary_unary_rpc_method_handler(
          servicer.GetScoreStatus,
          request_deserializer=loopchain__pb2.StatusRequest.FromString,
          response_serializer=loopchain__pb2.StatusReply.SerializeToString,
      ),
      'Stop': grpc.unary_unary_rpc_method_handler(
          servicer.Stop,
          request_deserializer=loopchain__pb2.StopRequest.FromString,
          response_serializer=loopchain__pb2.StopReply.SerializeToString,
      ),
      'CreateTx': grpc.unary_unary_rpc_method_handler(
          servicer.CreateTx,
          request_deserializer=loopchain__pb2.CreateTxRequest.FromString,
          response_serializer=loopchain__pb2.CreateTxReply.SerializeToString,
      ),
      'GetTx': grpc.unary_unary_rpc_method_handler(
          servicer.GetTx,
          request_deserializer=loopchain__pb2.GetTxRequest.FromString,
          response_serializer=loopchain__pb2.GetTxReply.SerializeToString,
      ),
      'GetBlock': grpc.unary_unary_rpc_method_handler(
          servicer.GetBlock,
          request_deserializer=loopchain__pb2.GetBlockRequest.FromString,
          response_serializer=loopchain__pb2.GetBlockReply.SerializeToString,
      ),
      'GetPrecommitBlock': grpc.unary_unary_rpc_method_handler(
          servicer.GetPrecommitBlock,
          request_deserializer=loopchain__pb2.PrecommitBlockRequest.FromString,
          response_serializer=loopchain__pb2.PrecommitBlockReply.SerializeToString,
      ),
      'Query': grpc.unary_unary_rpc_method_handler(
          servicer.Query,
          request_deserializer=loopchain__pb2.QueryRequest.FromString,
          response_serializer=loopchain__pb2.QueryReply.SerializeToString,
      ),
      'GetInvokeResult': grpc.unary_unary_rpc_method_handler(
          servicer.GetInvokeResult,
          request_deserializer=loopchain__pb2.GetInvokeResultRequest.FromString,
          response_serializer=loopchain__pb2.GetInvokeResultReply.SerializeToString,
      ),
      'BlockSync': grpc.unary_unary_rpc_method_handler(
          servicer.BlockSync,
          request_deserializer=loopchain__pb2.BlockSyncRequest.FromString,
          response_serializer=loopchain__pb2.BlockSyncReply.SerializeToString,
      ),
      'AnnounceUnconfirmedBlock': grpc.unary_unary_rpc_method_handler(
          servicer.AnnounceUnconfirmedBlock,
          request_deserializer=loopchain__pb2.BlockSend.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'AnnounceNewBlockForVote': grpc.unary_unary_rpc_method_handler(
          servicer.AnnounceNewBlockForVote,
          request_deserializer=loopchain__pb2.NewBlockSend.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'AnnounceConfirmedBlock': grpc.unary_unary_rpc_method_handler(
          servicer.AnnounceConfirmedBlock,
          request_deserializer=loopchain__pb2.BlockAnnounce.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'AnnounceNewPeer': grpc.unary_unary_rpc_method_handler(
          servicer.AnnounceNewPeer,
          request_deserializer=loopchain__pb2.PeerRequest.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'Echo': grpc.unary_unary_rpc_method_handler(
          servicer.Echo,
          request_deserializer=loopchain__pb2.CommonRequest.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'ComplainLeader': grpc.unary_unary_rpc_method_handler(
          servicer.ComplainLeader,
          request_deserializer=loopchain__pb2.ComplainLeaderRequest.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'GetChannelInfos': grpc.unary_unary_rpc_method_handler(
          servicer.GetChannelInfos,
          request_deserializer=loopchain__pb2.GetChannelInfosRequest.FromString,
          response_serializer=loopchain__pb2.GetChannelInfosReply.SerializeToString,
      ),
      'GetLastBlockHash': grpc.unary_unary_rpc_method_handler(
          servicer.GetLastBlockHash,
          request_deserializer=loopchain__pb2.CommonRequest.FromString,
          response_serializer=loopchain__pb2.BlockReply.SerializeToString,
      ),
      'Subscribe': grpc.unary_unary_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=loopchain__pb2.PeerRequest.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'UnSubscribe': grpc.unary_unary_rpc_method_handler(
          servicer.UnSubscribe,
          request_deserializer=loopchain__pb2.PeerRequest.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'AddTx': grpc.unary_unary_rpc_method_handler(
          servicer.AddTx,
          request_deserializer=loopchain__pb2.TxSend.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'AddTxList': grpc.unary_unary_rpc_method_handler(
          servicer.AddTxList,
          request_deserializer=loopchain__pb2.TxSendList.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'VoteUnconfirmedBlock': grpc.unary_unary_rpc_method_handler(
          servicer.VoteUnconfirmedBlock,
          request_deserializer=loopchain__pb2.BlockVote.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'BroadcastVote': grpc.unary_unary_rpc_method_handler(
          servicer.BroadcastVote,
          request_deserializer=loopchain__pb2.Vote.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'PeerService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class RadioStationStub(object):
  """########################################################################
  RadioStation Services
  ########################################################################

  RadioStation Outer Service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Request = channel.unary_unary(
        '/RadioStation/Request',
        request_serializer=loopchain__pb2.Message.SerializeToString,
        response_deserializer=loopchain__pb2.Message.FromString,
        )
    self.GetStatus = channel.unary_unary(
        '/RadioStation/GetStatus',
        request_serializer=loopchain__pb2.StatusRequest.SerializeToString,
        response_deserializer=loopchain__pb2.StatusReply.FromString,
        )
    self.Stop = channel.unary_unary(
        '/RadioStation/Stop',
        request_serializer=loopchain__pb2.StopRequest.SerializeToString,
        response_deserializer=loopchain__pb2.StopReply.FromString,
        )
    self.GetChannelInfos = channel.unary_unary(
        '/RadioStation/GetChannelInfos',
        request_serializer=loopchain__pb2.GetChannelInfosRequest.SerializeToString,
        response_deserializer=loopchain__pb2.GetChannelInfosReply.FromString,
        )
    self.ConnectPeer = channel.unary_unary(
        '/RadioStation/ConnectPeer',
        request_serializer=loopchain__pb2.ConnectPeerRequest.SerializeToString,
        response_deserializer=loopchain__pb2.ConnectPeerReply.FromString,
        )
    self.GetPeerList = channel.unary_unary(
        '/RadioStation/GetPeerList',
        request_serializer=loopchain__pb2.CommonRequest.SerializeToString,
        response_deserializer=loopchain__pb2.PeerList.FromString,
        )
    self.GetPeerStatus = channel.unary_unary(
        '/RadioStation/GetPeerStatus',
        request_serializer=loopchain__pb2.PeerID.SerializeToString,
        response_deserializer=loopchain__pb2.StatusReply.FromString,
        )
    self.AnnounceNewLeader = channel.unary_unary(
        '/RadioStation/AnnounceNewLeader',
        request_serializer=loopchain__pb2.ComplainLeaderRequest.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.GetRandomTable = channel.unary_unary(
        '/RadioStation/GetRandomTable',
        request_serializer=loopchain__pb2.CommonRequest.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.Subscribe = channel.unary_unary(
        '/RadioStation/Subscribe',
        request_serializer=loopchain__pb2.PeerRequest.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )
    self.UnSubscribe = channel.unary_unary(
        '/RadioStation/UnSubscribe',
        request_serializer=loopchain__pb2.PeerRequest.SerializeToString,
        response_deserializer=loopchain__pb2.CommonReply.FromString,
        )


class RadioStationServicer(object):
  """########################################################################
  RadioStation Services
  ########################################################################

  RadioStation Outer Service
  """

  def Request(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Stop(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetChannelInfos(self, request, context):
    """Peer 접속
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ConnectPeer(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetPeerList(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetPeerStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AnnounceNewLeader(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetRandomTable(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Subscribe(self, request, context):
    """Subscribe 와 UnSubscribe 는 Broadcast 관련 메소드로 loopchain.proto 와 동일하게 구성되어야 한다.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UnSubscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RadioStationServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Request': grpc.unary_unary_rpc_method_handler(
          servicer.Request,
          request_deserializer=loopchain__pb2.Message.FromString,
          response_serializer=loopchain__pb2.Message.SerializeToString,
      ),
      'GetStatus': grpc.unary_unary_rpc_method_handler(
          servicer.GetStatus,
          request_deserializer=loopchain__pb2.StatusRequest.FromString,
          response_serializer=loopchain__pb2.StatusReply.SerializeToString,
      ),
      'Stop': grpc.unary_unary_rpc_method_handler(
          servicer.Stop,
          request_deserializer=loopchain__pb2.StopRequest.FromString,
          response_serializer=loopchain__pb2.StopReply.SerializeToString,
      ),
      'GetChannelInfos': grpc.unary_unary_rpc_method_handler(
          servicer.GetChannelInfos,
          request_deserializer=loopchain__pb2.GetChannelInfosRequest.FromString,
          response_serializer=loopchain__pb2.GetChannelInfosReply.SerializeToString,
      ),
      'ConnectPeer': grpc.unary_unary_rpc_method_handler(
          servicer.ConnectPeer,
          request_deserializer=loopchain__pb2.ConnectPeerRequest.FromString,
          response_serializer=loopchain__pb2.ConnectPeerReply.SerializeToString,
      ),
      'GetPeerList': grpc.unary_unary_rpc_method_handler(
          servicer.GetPeerList,
          request_deserializer=loopchain__pb2.CommonRequest.FromString,
          response_serializer=loopchain__pb2.PeerList.SerializeToString,
      ),
      'GetPeerStatus': grpc.unary_unary_rpc_method_handler(
          servicer.GetPeerStatus,
          request_deserializer=loopchain__pb2.PeerID.FromString,
          response_serializer=loopchain__pb2.StatusReply.SerializeToString,
      ),
      'AnnounceNewLeader': grpc.unary_unary_rpc_method_handler(
          servicer.AnnounceNewLeader,
          request_deserializer=loopchain__pb2.ComplainLeaderRequest.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'GetRandomTable': grpc.unary_unary_rpc_method_handler(
          servicer.GetRandomTable,
          request_deserializer=loopchain__pb2.CommonRequest.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'Subscribe': grpc.unary_unary_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=loopchain__pb2.PeerRequest.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
      'UnSubscribe': grpc.unary_unary_rpc_method_handler(
          servicer.UnSubscribe,
          request_deserializer=loopchain__pb2.PeerRequest.FromString,
          response_serializer=loopchain__pb2.CommonReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'RadioStation', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class AdminServiceStub(object):
  """RadioStation Inner Service for Admin
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Request = channel.unary_unary(
        '/AdminService/Request',
        request_serializer=loopchain__pb2.Message.SerializeToString,
        response_deserializer=loopchain__pb2.Message.FromString,
        )


class AdminServiceServicer(object):
  """RadioStation Inner Service for Admin
  """

  def Request(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AdminServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Request': grpc.unary_unary_rpc_method_handler(
          servicer.Request,
          request_deserializer=loopchain__pb2.Message.FromString,
          response_serializer=loopchain__pb2.Message.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'AdminService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ContainerStub(object):
  """########################################################################
  Container Service
  ########################################################################

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Request = channel.unary_unary(
        '/Container/Request',
        request_serializer=loopchain__pb2.Message.SerializeToString,
        response_deserializer=loopchain__pb2.Message.FromString,
        )


class ContainerServicer(object):
  """########################################################################
  Container Service
  ########################################################################

  """

  def Request(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ContainerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Request': grpc.unary_unary_rpc_method_handler(
          servicer.Request,
          request_deserializer=loopchain__pb2.Message.FromString,
          response_serializer=loopchain__pb2.Message.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Container', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
